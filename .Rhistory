ifelse (angle > 202.5 & angle <= 247.5, ucna$smer[i] <- "JZ",
ifelse (angle > 247.5 & angle <= 292.5, ucna$smer[i] <- "Z",
ifelse (angle > 292.5 & angle <= 337.5, ucna$smer[i] <- "SZ", ucna$smer[i] <- "brezveterje"))))))))
}
for(i in 1:nrow(ucna)){
angle <- as.double(ucna$smer_vetra[i])
cat(angle. " ")
ifelse(angle > 337.5 & angle <=360 | angle > 0 & angle <= 22.5, ucna$smer[i] <- "S",
ifelse (angle > 22.5 & angle <=67.5, ucna$smer[i] <- "SV",
ifelse (angle > 67.5 & angle <=112.5, ucna$smer[i] <- "V",
ifelse (angle > 112.5 & angle <= 157.5, ucna$smer[i] <- "JV",
ifelse (angle > 157.5 & angle <= 202.5, ucna$smer[i] <- "J",
ifelse (angle > 202.5 & angle <= 247.5, ucna$smer[i] <- "JZ",
ifelse (angle > 247.5 & angle <= 292.5, ucna$smer[i] <- "Z",
ifelse (angle > 292.5 & angle <= 337.5, ucna$smer[i] <- "SZ", ucna$smer[i] <- "brezveterje"))))))))
}
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
cat(angle. ": :")
cat(angle, " ")
for(i in 1:nrow(ucna)){
angle <- as.double(ucna$smer_vetra[i])
cat(angle, " ")
ifelse(angle > 337.5 & angle <=360 | angle > 0 & angle <= 22.5, ucna$smer[i] <- "S",
ifelse (angle > 22.5 & angle <=67.5, ucna$smer[i] <- "SV",
ifelse (angle > 67.5 & angle <=112.5, ucna$smer[i] <- "V",
ifelse (angle > 112.5 & angle <= 157.5, ucna$smer[i] <- "JV",
ifelse (angle > 157.5 & angle <= 202.5, ucna$smer[i] <- "J",
ifelse (angle > 202.5 & angle <= 247.5, ucna$smer[i] <- "JZ",
ifelse (angle > 247.5 & angle <= 292.5, ucna$smer[i] <- "Z",
ifelse (angle > 292.5 & angle <= 337.5, ucna$smer[i] <- "SZ", ucna$smer[i] <- "brezveterje"))))))))
}
summary(ucna)
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
for(i in 1:nrow(ucna)){
angle <- as.double(ucna$smer_vetra[i])
cat(angle, " ")
ifelse (angle > 337.5 & angle <=360 | angle > 0 & angle <= 22.5, ucna$smer[i] <- "S",
ifelse (angle > 22.5 & angle <=67.5, ucna$smer[i] <- "SV",
ifelse (angle > 67.5 & angle <=112.5, ucna$smer[i] <- "V",
ifelse (angle > 112.5 & angle <= 157.5, ucna$smer[i] <- "JV",
ifelse (angle > 157.5 & angle <= 202.5, ucna$smer[i] <- "J",
ifelse (angle > 202.5 & angle <= 247.5, ucna$smer[i] <- "JZ",
ifelse (angle > 247.5 & angle <= 292.5, ucna$smer[i] <- "Z",
ifelse (angle > 292.5 & angle <= 337.5, ucna$smer[i] <- "SZ", ucna$smer[i] <- "brezveterje"))))))))
}
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
for(i in 1:nrow(ucna)){
angle <- as.double(ucna$smer_vetra[i])
ifelse (angle > 337.5 && angle <=360 || angle > 0 && angle <= 22.5, ucna$smer[i] <- "S",
ifelse (angle > 22.5 && angle <=67.5, ucna$smer[i] <- "SV",
ifelse (angle > 67.5 && angle <=112.5, ucna$smer[i] <- "V",
ifelse (angle > 112.5 & angle <= 157.5, ucna$smer[i] <- "JV",
ifelse (angle > 157.5 && angle <= 202.5, ucna$smer[i] <- "J",
ifelse (angle > 202.5 && angle <= 247.5, ucna$smer[i] <- "JZ",
ifelse (angle > 247.5 && angle <= 292.5, ucna$smer[i] <- "Z",
ifelse (angle > 292.5 && angle <= 337.5, ucna$smer[i] <- "SZ", ucna$smer[i] <- "brezveterje"))))))))
}
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
for (i in 1:nrow(ucna))
for (i in 1:nrow(ucna))
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "N",
ifelse (konc == 1,ucna$smer[i] <- "NE",
ifelse (konc == 2,ucna$smer[i] <- "E",
ifelse (konc == 3,ucna$smer[i] <- "SE",
ifelse (konc == 4,ucna$smer[i] <- "S",
ifelse (konc == 5,ucna$smer[i] <- "SW",
ifelse (konc == 6,ucna$smer[i] <- "W",
ifelse (konc == 7,ucna$smer[i] <- "NW"))))))))
}
}
for (i in 1:nrow(ucna)) {
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "N",
ifelse (konc == 1,ucna$smer[i] <- "NE",
ifelse (konc == 2,ucna$smer[i] <- "E",
ifelse (konc == 3,ucna$smer[i] <- "SE",
ifelse (konc == 4,ucna$smer[i] <- "S",
ifelse (konc == 5,ucna$smer[i] <- "SW",
ifelse (konc == 6,ucna$smer[i] <- "W",
ifelse (konc == 7,ucna$smer[i] <- "NW"))))))))
}
}
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
for (i in 1:nrow(ucna)) {
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "N",
ifelse (konc == 1,ucna$smer[i] <- "NE",
ifelse (konc == 2,ucna$smer[i] <- "E",
ifelse (konc == 3,ucna$smer[i] <- "SE",
ifelse (konc == 4,ucna$smer[i] <- "S",
ifelse (konc == 5,ucna$smer[i] <- "SW",
ifelse (konc == 6,ucna$smer[i] <- "W",
ifelse (konc == 7,ucna$smer[i] <- "NW"))))))))
}
}
summary(ucna)
View(ucna)
rm(ucna)
#Vnos podatkov ucne in testne mnozice
ucna <- read.table(file="ucnaSem1.txt", sep=",", header=TRUE)
#faktoriziramo regijo in namembnost
ucna$regija <- as.factor(ucna$regija)
ucna$namembnost <- as.factor(ucna$namembnost)
#dodan atribut vikend - vrne true ali false glede na to ali je bil podani datum vikend ali ne
install.packages("chron")
ucna$vikend <- c(is.weekend(ucna$datum))
install.packages("chron")
View(ucna)
ucna$vikend <- c(is.weekend(ucna$datum))
library("chron")
ucna$vikend <- c(is.weekend(ucna$datum))
#razvrstitev glede na letne case
WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Winter Solstice
PO <- as.Date("2016-03-20",  format = "%Y-%m-%d") # Spring Equinox
SU <- as.Date("2016-06-20",  format = "%Y-%m-%d") # Summer Solstice
JE <- as.Date("2016-09-22",  format = "%Y-%m-%d") # Fall Equinox
for (i in 1:nrow(ucna))
{
d <- as.Date(strftime(ucna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, ucna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, ucna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, ucna$letnicas[i] <- "Poletje", ucna$letnicas[i] <- "Jesen")))
}
for (i in 1:nrow(ucna))
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "N",
ifelse (konc == 1,ucna$smer[i] <- "NE",
ifelse (konc == 2,ucna$smer[i] <- "E",
ifelse (konc == 3,ucna$smer[i] <- "SE",
ifelse (konc == 4,ucna$smer[i] <- "S",
ifelse (konc == 5,ucna$smer[i] <- "SW",
ifelse (konc == 6,ucna$smer[i] <- "W",
ifelse (konc == 7,ucna$smer[i] <- "NW"))))))))
}
}
summary(ucna)
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
ucna$smer
for (i in 1:nrow(ucna))
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "S",
ifelse (konc == 1,ucna$smer[i] <- "SV",
ifelse (konc == 2,ucna$smer[i] <- "V",
ifelse (konc == 3,ucna$smer[i] <- "JV",
ifelse (konc == 4,ucna$smer[i] <- "J",
ifelse (konc == 5,ucna$smer[i] <- "JZ",
ifelse (konc == 6,ucna$smer[i] <- "Z",
ifelse (konc == 7,ucna$smer[i] <- "SZ"))))))))
}
}
summary(ucna)
ucna$smer <- as.factor(ucna$smer)
rm(ucna)
#Vnos podatkov ucne in testne mnozice
ucna <- read.table(file="ucnaSem1.txt", sep=",", header=TRUE)
#faktoriziramo regijo in namembnost
ucna$regija <- as.factor(ucna$regija)
ucna$namembnost <- as.factor(ucna$namembnost)
library("data.table")
library
library
library
library
library
ucna$vikend <- c(is.weekend(ucna$datum))
#razvrstitev glede na letne case
WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Winter Solstice
PO <- as.Date("2016-03-20",  format = "%Y-%m-%d") # Spring Equinox
SU <- as.Date("2016-06-20",  format = "%Y-%m-%d") # Summer Solstice
JE <- as.Date("2016-09-22",  format = "%Y-%m-%d") # Fall Equinox
for (i in 1:nrow(ucna))
{
d <- as.Date(strftime(ucna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, ucna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, ucna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, ucna$letnicas[i] <- "Poletje", ucna$letnicas[i] <- "Jesen")))
}
ucna$letnicas <- as.factor(ucna$letnicas)
summary(ucna)
for (i in 1:nrow(ucna))
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "S",
ifelse (konc == 1,ucna$smer[i] <- "SV",
ifelse (konc == 2,ucna$smer[i] <- "V",
ifelse (konc == 3,ucna$smer[i] <- "JV",
ifelse (konc == 4,ucna$smer[i] <- "J",
ifelse (konc == 5,ucna$smer[i] <- "JZ",
ifelse (konc == 6,ucna$smer[i] <- "Z",
ifelse (konc == 7,ucna$smer[i] <- "SZ"))))))))
}
}
summary(ucna)
ucna$smer <- as.factor(ucna$smer)
rm(ucna)
#Vnos podatkov ucne in testne mnozice
ucna <- read.table(file="ucnaSem1.txt", sep=",", header=TRUE)
#faktoriziramo regijo in namembnost
ucna$regija <- as.factor(ucna$regija)
ucna$namembnost <- as.factor(ucna$namembnost)
ucna$vikend <- c(is.weekend(ucna$datum))
#razvrstitev glede na letne case
WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Winter Solstice
PO <- as.Date("2016-03-20",  format = "%Y-%m-%d") # Spring Equinox
SU <- as.Date("2016-06-20",  format = "%Y-%m-%d") # Summer Solstice
JE <- as.Date("2016-09-22",  format = "%Y-%m-%d") # Fall Equinox
for (i in 1:nrow(ucna))
{
d <- as.Date(strftime(ucna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, ucna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, ucna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, ucna$letnicas[i] <- "Poletje", ucna$letnicas[i] <- "Jesen")))
}
ucna$letnicas <- as.factor(ucna$letnicas)
for (i in 1:nrow(ucna))
summary(ucna)
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "S",
ifelse (konc == 1,ucna$smer[i] <- "SV",
ifelse (konc == 2,ucna$smer[i] <- "V",
ifelse (konc == 3,ucna$smer[i] <- "JV",
ifelse (konc == 4,ucna$smer[i] <- "J",
ifelse (konc == 5,ucna$smer[i] <- "JZ",
ifelse (konc == 6,ucna$smer[i] <- "Z",
ifelse (konc == 7,ucna$smer[i] <- "SZ"))))))))
}
}
ucna$smer <- as.factor(ucna$smer)
View(ucna)
rm(ucna)
#Vnos podatkov ucne in testne mnozice
ucna <- read.table(file="ucnaSem1.txt", sep=",", header=TRUE)
#faktoriziramo regijo in namembnost
ucna$regija <- as.factor(ucna$regija)
ucna$namembnost <- as.factor(ucna$namembnost)
ucna$vikend <- c(is.weekend(ucna$datum))
#razvrstitev glede na letne case
WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Winter Solstice
PO <- as.Date("2016-03-20",  format = "%Y-%m-%d") # Spring Equinox
SU <- as.Date("2016-06-20",  format = "%Y-%m-%d") # Summer Solstice
JE <- as.Date("2016-09-22",  format = "%Y-%m-%d") # Fall Equinox
for (i in 1:nrow(ucna))
{
d <- as.Date(strftime(ucna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, ucna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, ucna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, ucna$letnicas[i] <- "Poletje", ucna$letnicas[i] <- "Jesen")))
}
ucna$letnicas <- as.factor(ucna$letnicas)
for
for
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "S",
ifelse (konc == 1,ucna$smer[i] <- "SV",
ifelse (konc == 2,ucna$smer[i] <- "V",
ifelse (konc == 3,ucna$smer[i] <- "JV",
ifelse (konc == 4,ucna$smer[i] <- "J",
ifelse (konc == 5,ucna$smer[i] <- "JZ",
ifelse (konc == 6,ucna$smer[i] <- "Z",
ifelse (konc == 7,ucna$smer[i] <- "SZ"))))))))
}
}
summary(ucna)
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
ucna[231]
ucna[231,]
rm(ucna)
#Vnos podatkov ucne in testne mnozice
ucna <- read.table(file="ucnaSem1.txt", sep=",", header=TRUE)
#faktoriziramo regijo in namembnost
ucna$regija <- as.factor(ucna$regija)
ucna$namembnost <- as.factor(ucna$namembnost)
ucna$vikend <- c(is.weekend(ucna$datum))
#razvrstitev glede na letne case
WS <- as.Date("2016-12-21", format = "%Y-%m-%d") # Winter Solstice
PO <- as.Date("2016-03-20",  format = "%Y-%m-%d") # Spring Equinox
SU <- as.Date("2016-06-20",  format = "%Y-%m-%d") # Summer Solstice
JE <- as.Date("2016-09-22",  format = "%Y-%m-%d") # Fall Equinox
for (i in 1:nrow(ucna))
{
d <- as.Date(strftime(ucna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, ucna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, ucna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, ucna$letnicas[i] <- "Poletje", ucna$letnicas[i] <- "Jesen")))
}
ucna$letnicas <- as.factor(ucna$letnicas)
summary(ucna)
for (i in 1:nrow(ucna))
{
if (ucna$smer_vetra[i] == 0){
ucna$smer[i] <- "Brezveterje"
}else {
cifra <- floor((ucna$smer_vetra[i] / 45 ) + 0.5)
konc <- cifra %% 8
ifelse (konc == 0, ucna$smer[i] <- "S",
ifelse (konc == 1,ucna$smer[i] <- "SV",
ifelse (konc == 2,ucna$smer[i] <- "V",
ifelse (konc == 3,ucna$smer[i] <- "JV",
ifelse (konc == 4,ucna$smer[i] <- "J",
ifelse (konc == 5,ucna$smer[i] <- "JZ",
ifelse (konc == 6,ucna$smer[i] <- "Z",
ifelse (konc == 7,ucna$smer[i] <- "SZ"))))))))
}
}
ucna$smer <- as.factor(ucna$smer)
summary(ucna)
##2. NALOGA
#dodajanje atributov
install.packages("data.table")
library("data.table")
dt = as.data.table(ucna)
ymd <- c(ucna$datum[1:nrow(ucna)])
ucna <- dt[, c("YYYY", "MM", "DD") := tstrsplit(ymd, "-", fixed=TRUE)]
head(ucna)
mean(ucna$povrsina[ucna$stavba == 1 & ucna$MM = "01"])
summary(ucna)
mean(ucna$povrsina[ucna$stavba == 1 & ucna$MM == "01"])
mean(ucna$poraba[ucna$stavba == 1 & ucna$MM == "01"])
library(stringr)
months <- str_pad(1:99, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
for(m in 1:12) {
for(i in mn:mx){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
}
}
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in mn:mx){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
}
}
povpPorabaMesec
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in 1:nrow(ucna)){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba[i,]] & ucna$MM == months[m]])
}
}
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in 1:nrow(ucna)){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba[i,] & ucna$MM == months[m]])
}
}
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba[i] & ucna$MM == months[m]])
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in 1:nrow(ucna)){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba[i] & ucna$MM == months[m]])
}
}
povpPorabaMesec
povpPorabaMesec
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in 1:nrow(ucna)){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
}
}
povpPorabaMesec
library(stringr)
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in 1:nrow(ucna)){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
}
}
povpPorabaMesec
library(stringr)
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
for(m in 1:12) {
for(i in mn:mx){
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
}
}
povpPorabaMesec
a <- is.na(povpPorabaMesec)
b <- povpPorabaMesec[a]
b
b <- povpPorabaMesec[!a]
b
View(ucna)
povpPorabaMesec <- c()
for(m in 1:12) {
cat(m)
for(i in mn:mx){
cat(i)
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
cat(povpPorabaMesec[i])
}
}
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
for(m in 1:12) {
cat(m, "\n")
for(i in mn:mx){
cat(i, "\n")
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
cat(povpPorabaMesec[i], "\n")
}
}
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
for(m in 1:12) {
cat("MONTH: ",m, "\n")
for(i in mn:mx){
cat("indeks: ", i, "\n")
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
cat(povpPorabaMesec[i], "\n")
}
}
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
months <- str_pad(1:12, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- c()
for(m in 1:12) {
cat("MONTH: ", months[m] , "\n")
for(i in mn:mx){
cat("indeks: ", i, "\n")
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
cat(povpPorabaMesec[i], "\n")
}
}
months <- str_pad(1:12, pad = 0,width = 2 , "left")
months[1]
months[2]
cat("MONTH: ", m, months[m] , "\n")
povpPorabaMesec <- c()
for(m in 1:12) {
cat("MONTH: ", m, months[m] , "\n")
for(i in mn:mx){
cat("indeks: ", i, "\n")
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
cat(povpPorabaMesec[i], "\n")
}
}
cat("MONTH: ", m, months[m] , "\n")
#ocenjevanje
install.packages("CORElearn")
library(CORElearn)
sort(attrEval(type ~ ., ucna, "InfGain"), decreasing = T)
sort(attrEval(poraba ~ ., ucna, "InfGain"), decreasing = T)
sort(attrEval(poraba ~ ., ucna, "Gini"), decreasing = T)
neki <- sort(attrEval(poraba ~ ., ucna, "Gini"), decreasing = T)
neki
neki
neki
sort(attrEval(poraba ~ ., ucna, "Gini"), decreasing = T)
sort(attrEval(poraba ~ ., ucna, "GainRatio"), decreasing = TRUE)
sort(attrEval(poraba ~ ., ucna, "ReliefFequalK"), decreasing = TRUE)
