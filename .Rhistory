}
#testna
for (i in seq_len(nrow(testna)))
{
d <- as.Date(strftime(testna$datum[i], format="2016-%m-%d"))
ifelse (d >= WS | d < PO, testna$letnicas[i] <- "Zima",
ifelse (d >= PO & d < SU, testna$letnicas[i] <- "Pomlad",
ifelse (d >= SU & d < JE, testna$letnicas[i] <- "Poletje", testna$letnicas[i] <- "Jesen")))
}
# Povprecna poraba predhodni mesec
#ucna
library(stringr)
months <- str_pad(1:99, pad = 0,width = 2 , "left")
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaMesec <- NULL
for(m in 1:12) {
for(i in mn:mx) {
povpPorabaMesec[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$MM == months[m]])
if (m == 12) {
ucna$povp_poraba_mesec_predhodni[ucna$stavba == i & ucna$MM == months[1]] <- povpPorabaMesec[i]
}
else {
ucna$povp_poraba_mesec_predhodni[ucna$stavba == i & ucna$MM == months[m+1]] <- povpPorabaMesec[i]
}
}
}
#testna
mn <- min(testna$stavba)
mx <- max(testna$stavba)
povpPorabaMesec <- NULL
for(m in 1:12) {
for(i in mn:mx) {
povpPorabaMesec[i] <- mean(testna$poraba[testna$stavba == i & testna$MM == months[m]])
if (m == 12) {
testna$povp_poraba_mesec_predhodni[testna$stavba == i & testna$MM == months[1]] <- povpPorabaMesec[i]
}
else {
testna$povp_poraba_mesec_predhodni[testna$stavba == i & testna$MM == months[m+1]] <- povpPorabaMesec[i]
}
}
}
#Povprecna poraba na teden
#ucna
library("lubridate")
wknum <- lubridate::week(ymd(ucna$datum))
ucna$week_num <- wknum
mn <- min(ucna$stavba)
mx <- max(ucna$stavba)
povpPorabaTeden <- NULL
for(t in 1:max(ucna$week_num)) {
for(i in mn:mx) {
povpPorabaTeden[i] <- mean(ucna$poraba[ucna$stavba == i & ucna$week_num == t])
if (is.nan(povpPorabaTeden[i])){
povpPorabaTeden[i] <- 0
}
if (t == max(ucna$week_num)) {
ucna$povp_poraba_teden_predhodni[ucna$stavba == i & ucna$week_num == 1] <- povpPorabaTeden[i]
}else {
ucna$povp_poraba_teden_predhodni[ucna$stavba == i & ucna$week_num == t+1] <- povpPorabaTeden[i]
}
}
}
#testna
#teden povp poraba
wknum <- lubridate::week(ymd(testna$datum))
testna$week_num <- wknum
mn <- min(testna$stavba)
mx <- max(testna$stavba)
povpPorabaTeden <- NULL
for(t in 1:max(testna$week_num)) {
for(i in mn:mx) {
povpPorabaTeden[i] <- mean(testna$poraba[testna$stavba == i & testna$week_num == t])
if (is.nan(povpPorabaTeden[i])){
povpPorabaTeden[i] <- 0
}
if (t == max(testna$week_num)) {
testna$povp_poraba_teden_predhodni[testna$stavba == i & testna$week_num == 1] <- povpPorabaTeden[i]
}else {
testna$povp_poraba_teden_predhodni[testna$stavba == i & testna$week_num == t+1] <- povpPorabaTeden[i]
}
}
}
#Brisanje
#ucna
ucna$DD <- NULL
ucna$MM <- NULL
ucna$YYYY <- NULL
ucna$week_num <- NULL
ucna$stavba <- NULL
#testna
testna$DD <- NULL
testna$MM <- NULL
testna$YYYY <- NULL
testna$week_num <- NULL
testna$stavba <- NULL
## Faktoriziranje
#letni cas
ucna$letnicas <- factor(ucna$letnicas, levels = c("Zima", "Pomlad", "Poletje", "Jesen"))
testna$letnicas <- factor(testna$letnicas, levels = c("Zima", "Pomlad", "Poletje", "Jesen"))
#oblacnost
ucna$oblacnost <- factor(ucna$oblacnost, levels = c(0,1,2,3,4,5,6,7,8,9,10))
testna$oblacnost <- factor(testna$oblacnost, levels = c(0,1,2,3,4,5,6,7,8,9,10))
#namembnost
ucna$namembnost <- factor(ucna$namembnost, levels = c("izobrazevalna", "javno_storitvena", "kulturno_razvedrilna", "poslovna", "stanovanjska"))
testna$namembnost <- factor(testna$namembnost, levels = c("izobrazevalna", "javno_storitvena", "kulturno_razvedrilna", "poslovna", "stanovanjska"))
#regija
ucna$regija <- factor(ucna$regija, levels = c("vzhodna", "zahodna"))
testna$regija <- factor(testna$regija, levels = c("vzhodna", "zahodna"))
#datum
datumi <- ucna$datum
datumDate <- as.Date(datumi, "%Y-%m-%d")
ucna$datum <- datumDate
datumi <- testna$datum
datumDate <- as.Date(datumi, "%Y-%m-%d")
testna$datum <- datumDate
View(testna)
View(ucna)
#ucenje iz ene same regije
ucna_Vzhodna <- ucna[ucna$regija == "vzhodna"]
ucna_zahodna <- ucna[ucna$regija == "zahodna"]
library(nnet)
observed <- testna$namembnost
obsMat <- class.ind(testna$namembnost)
#
#
# NAIVNI BAYESOV KLASIFIKATOR
#
# VZHODNA REGIJA
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_Vzhodna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
#
#
# NAIVNI BAYESOV KLASIFIKATOR
#
# VZHODNA REGIJA
set.seed(0)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_Vzhodna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
nb <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_zahodna, model="bayes")
# ZAGHODNA REGIJA
set.seed(0)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_zahodna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
#
#
# NAIVNI BAYESOV KLASIFIKATOR
#
# VZHODNA REGIJA
set.seed(0)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_Vzhodna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
#
#
# ODLOCITVENO DREVO
#
#VZHODNA
library(CORElearn)
set.seed(0)
dt <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba , data = ucna_vzhodna, model="tree")
#
#
# ODLOCITVENO DREVO
#
#VZHODNA
library(CORElearn)
set.seed(0)
dt <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba , data = ucna_Vzhodna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
#ZAHODNA
library(CORElearn)
set.seed(0)
dt <- CoreModel(namembnost ~ povrsina + regija + povp_poraba_mesec_predhodni + regija + povp_poraba_teden_predhodni + poraba, data = ucna_zahodna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
#VZHODNA
set.seed(0)
sm <- svm(namembnost ~ ., data = ucna_vzhodna)
#
#
# SVM
#
#
library(e1071)
#VZHODNA
set.seed(0)
sm <- svm(namembnost ~ ., data = ucna_vzhodna)
#VZHODNA
set.seed(0)
sm <- svm(namembnost ~ ., data = ucna_Vzhodna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
#ZAHODNA
set.seed(0)
sm <- svm(namembnost ~ ., data = ucna_zahodna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
#REGRESIJA
#
#
## KKNN
#
#VZHODNA
library(kknn)
knn.model <- kknn(poraba ~ ., ucna_Vzhodna, testna, k = 10)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
#REGRESIJA
#
#
## KKNN
#
#VZHODNA
library(kknn)
knn.model <- kknn(poraba ~ ., ucna_Vzhodna, testna, k = 10)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
rmse(testna$poraba, predicted, mean(ucna$poraba))
#ZAHODNA
modelReduced <- train.kknn(poraba ~ ., ucna_zahodna, ks = 10)
#ZAHODNA
modelReduced <- train.kknn(poraba ~ ., ucna_zahodna, k = 10)
#ZAHODNA
modelReduced <- train.kknn(poraba ~ ., ucna_zahodna, k = 10)
#ZAHODNA
modelReduced <- train.kknn(poraba ~ ., ucna_zahodna, ks = 10)
predicted <- predict(modelReduced, testna)
rmae(testna$poraba, predicted, mean(ucna$poraba))
rmse(testna$poraba, predicted, mean(ucna$poraba))
knn.model <- kknn(poraba ~ ., ucna_Vzhodna, testna, k = 10)
#REGRESIJA
#
#
## KKNN
#
#VZHODNA
library(kknn)
knn.model <- kknn(poraba ~ ., ucna_Vzhodna, ks = 10)
#ZAHODNA
modelReduced <- train.kknn(poraba ~ ., ucna_zahodna, ks = 10)
#REGRESIJA
#
#
## KKNN
#
#VZHODNA
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 10)
predicted <- predict(modelFull, testna)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
#ZAHODNA
modelFull <- train.kknn(poraba ~ ., ucna_zahodna, ks = 10)
predicted <- predict(modelFull, testna)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
#REGRESIJA
#
#
## KKNN
#
#VZHODNA
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 10)
predicted <- predict(modelFull, testna)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
#ZAHODNA
set.seed(0)
modelFull <- train.kknn(poraba ~ ., ucna_zahodna, ks = 10)
predicted <- predict(modelFull, testna)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
#VZHOD
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_Vzhodna)
library(rpart)
library(rpart.plot)
#VZHOD
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_Vzhodna)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_Vzhodna, cp = 0)
tab <- printcp(rt.model)
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
#VZHOD
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_Vzhodna)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_Vzhodna, cp = 0)
tab <- printcp(rt.model)
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
#ZAHOD
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_zahodna)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna_zahodna, cp = 0)
tab <- printcp(rt.model)
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
library(randomForest)
rf.model <- randomForest(poraba ~ ., ucna_Vzhodna)
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
library(randomForest)
rf.model <- randomForest(poraba ~ ., ucna_zahodna)
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
# Vsi atributi; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
# Vsi atributi; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
# Vsi atributi; k = 10
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 10)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
# Vsi atributi; k = 10
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna_Vzhodna, ks = 10)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
# Wrapper; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + stavba + regija + namembnost + povrsina + temp_zraka + leto_izgradnje, ucna_Vzhodna, ks = 5)
# Izbira podmnozice atributov z metodo ovojnice (wrapper)
source("wrapper.R")
# Funkcija za ucenje modela
myTrainFuncReg <- function(formula, traindata) {
train.kknn(formula, traindata, ks = 5)
}
# Funkcija za pridobivanje napovedi modela
myPredictFuncReg <- function(model, testdata) {
predict(model, testdata)
}
# Funkcija za ocenjevanje kvalitete modela (v tem primeru RMSE)
myEvalFuncRMSE <- function(predicted, observed, trained) {
sum((observed - predicted)^2) / sum((observed - mean(trained))^2)
}
set.seed(0)
wrapper(poraba ~ ., ucna, myTrainFuncReg, myPredictFuncReg, myEvalFuncRMSE, cvfolds = 10)
# Vsi atributi; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Vsi atributi; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Vsi atributi; k = 10
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna, ks = 10)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Vsi atributi; k = 10
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna, ks = 10)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Vsi atributi; k = 5
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ ., ucna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Wrapper; k = 5 !!!
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + povrsina + temp_zraka + namembnost + leto_izgradnje, ucna, ks = 5)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# Wrapper; k = 10
set.seed(0)
library(kknn)
modelFull <- train.kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + leto_izgradnje + datum + povrsina + regija, ucna, ks = 10)
predicted <- predict(modelFull, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
# Vzhodna regija
install.packages("randomForest")
install.packages("randomForest")
library(randomForest)
rf.model <- randomForest(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, ucna_Vzhodna)
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_Vzhodna$poraba))
library(randomForest)
rf.model <- randomForest(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, ucna_zahodna)
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna_zahodna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna_zahodna$poraba))
