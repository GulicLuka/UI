datumi <- testna$datum
datumDate <- as.Date(datumi, "%Y-%m-%d")
datumDate
testna$datum <- datumDate
summary(testna)
library(nnet)
CA <- function(observed, predicted)
{
mean(observed == predicted)
}
brier.score <- function(observedMatrix, predictedMatrix)
{
sum((observedMatrix - predictedMatrix) ^ 2) / nrow(predictedMatrix)
}
observed <- testna$namembnost
obsMat <- class.ind(testna$namembnost)
CA <- function(observed, predicted)
{
mean(observed == predicted)
}
brier.score <- function(observedMatrix, predictedMatrix)
{
sum((observedMatrix - predictedMatrix) ^ 2) / nrow(predictedMatrix)
}
observed <- testna$namembnost
obsMat <- class.ind(testna$namembnost)
#wrapper
source("wrapper.R")
#
# Funkcija wrapper potrebuje:
# - formulo
#- ucno mnozico
#- funkcijo za ucenje modela
#- funkcijo za pridobivanje napovedi modela
#- funkcijo za ocenjevanje kvalitete napovedi
#- parameter precnega preverjanja
#
#
# Funkcija za ucenje modela (zaradi hitrosti bomo uporabili odlocitveno drevo)
#
library(rpart)
myTrainFunc <- function(formula, traindata)
{
rpart(formula, traindata)
}
#
# Funkcija za pridobivanje napovedi modela (razredi)
#
myPredictFunc <- function(model, testdata)
{
predict(model, testdata, type="class")
}
#
# Atribute lahko izberemo glede na klasifikacijsko tocnost modela
#
myEvalFunc <- function(predicted, observed, trained)
{
# vracamo napako modela, saj wrapper minimizira vrednost ocene
1.0 - mean(observed == predicted)
}
set.seed(0)
wrapper(namembnost ~ ., ucna, myTrainFunc, myPredictFunc, myEvalFunc, cvfolds=10)
library(CORElearn)
nb <- CoreModel(namembnost ~ ., data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine , data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine , data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine , data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
dt <- CoreModel(namembnost ~ . , data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum, data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina + leto_izgradnje, data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina, data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
dt <- CoreModel(namembnost ~ povrsina + leto_izgradnje, data = ucna, model="tree")
predicted <- predict(dt, testna, type="class")
CA(observed, predicted)
predMat <- predict(dt, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
nb <- CoreModel(namembnost ~ ., data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum, data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
library(CORElearn)
nb <- CoreModel(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, data = ucna, model="bayes")
predicted <- predict(nb, testna, type="class")
CA(observed, predicted)
predMat <- predict(nb, testna, type = "prob")
brier.score(obsMat, predMat)
sm <- svm(namembnost ~ ., data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ ., ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
sm <- svm(namembnost ~ ., data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ ., ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum, ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
library(e1071)
#VSE
sm <- svm(namembnost ~ ., data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ ., ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + datum + temp_zraka + temp_rosisca + oblacnost + padavine, ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
q()
library(randomForest)
rf.model <- randomForest(poraba ~ ., ucna)
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
mae(testna$poraba, predicted)
# Mere za ocenjevanje ucenja v regresiji
# srednja absolutna napaka
mae <- function(obs, pred) {
mean(abs(obs - pred))
}
# srednja kvadratna napaka
mse <- function(obs, pred) {
mean((obs - pred)^2)
}
# Relativne mere ocenjujejo model v primerjavi s trivialno predikcijo
# hočemo da je manjše od 1. bližje 0 je boljše. več kot 1 -> slabši od trivialnega modela, manjši od 1 pa boljši od trivialnega modela
# relativna srednja absolutna napaka
rmae <- function(obs, pred, mean.val) {
sum(abs(obs - pred)) / sum(abs(obs - mean.val))
}
# relativna srednja kvadratna napaka
rmse <- function(obs, pred, mean.val) {
sum((obs - pred)^2) / sum((obs - mean.val)^2)
}
predicted <- predict(rf.model, testna)
mae(testna$poraba, predicted)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
#doloceni z wrapper
sm <- svm(namembnost ~ povrsina + letoizgradnje + regija, data = ucna)
#
#
# SVM
#
#
library(e1071)
#doloceni z wrapper
sm <- svm(namembnost ~ povrsina + letoizgradnje + regija, data = ucna)
#doloceni z wrapper
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, ucna, probability = T)
# Mere za ocenjevanje ucenja v regresiji
# srednja absolutna napaka
mae <- function(obs, pred) {
mean(abs(obs - pred))
}
# srednja kvadratna napaka
mse <- function(obs, pred) {
mean((obs - pred)^2)
}
mae(observed, predicted)
mse(observed, predicted)
# Relativne mere ocenjujejo model v primerjavi s trivialno predikcijo
# hočemo da je manjše od 1. bližje 0 je boljše. več kot 1 -> slabši od trivialnega modela, manjši od 1 pa boljši od trivialnega modela
# relativna srednja absolutna napaka
rmae <- function(obs, pred, mean.val) {
sum(abs(obs - pred)) / sum(abs(obs - mean.val))
}
# relativna srednja kvadratna napaka
rmse <- function(obs, pred, mean.val) {
sum((obs - pred)^2) / sum((obs - mean.val)^2)
}
# Izbira podmnozice atributov z metodo ovojnice (wrapper)
source("wrapper.R")
# Funkcija za ucenje modela
myTrainFuncReg <- function(formula, traindata) {
train.kknn(formula, traindata, ks = 5)
}
# Funkcija za pridobivanje napovedi modela
myPredictFuncReg <- function(model, testdata) {
predict(model, testdata)
}
# Funkcija za ocenjevanje kvalitete modela (v tem primeru RMSE)
myEvalFuncRMSE <- function(predicted, observed, trained) {
sum((observed - predicted)^2) / sum((observed - mean(trained))^2)
}
set.seed(0)
wrapper(poraba ~ ., ucna, myTrainFuncReg, myPredictFuncReg, myEvalFuncRMSE, cvfolds = 10)
library(kknn)
# Izbira podmnozice atributov z metodo ovojnice (wrapper)
source("wrapper.R")
# Funkcija za ucenje modela
myTrainFuncReg <- function(formula, traindata) {
train.kknn(formula, traindata, ks = 5)
}
# Funkcija za pridobivanje napovedi modela
myPredictFuncReg <- function(model, testdata) {
predict(model, testdata)
}
# Funkcija za ocenjevanje kvalitete modela (v tem primeru RMSE)
myEvalFuncRMSE <- function(predicted, observed, trained) {
sum((observed - predicted)^2) / sum((observed - mean(trained))^2)
}
set.seed(0)
wrapper(poraba ~ ., ucna, myTrainFuncReg, myPredictFuncReg, myEvalFuncRMSE, cvfolds = 10)
##############################################################################################################################
# Wrapper; k = 5
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + stavba + regija + namembnost + povrsina + temp_zraka + leto_izgradnje, ucna, testna, k = 5)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
# Wrapper; k = 5
set.seed(0)
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + stavba + regija + namembnost + povrsina + temp_zraka + leto_izgradnje, ucna, testna, k = 5)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
# Wrapper; k = 5
set.seed(0)
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + stavba + regija + namembnost + povrsina + temp_zraka + leto_izgradnje, ucna, testna, k = 5)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
##############################################################################################################################
# Wrapper; k = 10
set.seed(0)
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + leto_izgradnje + datum + povrsina + regija, ucna, testna, k = 10)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
#doloceni z wrapper
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
#doloceni z wrapper
set.seed(0)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, data = ucna)
predicted <- predict(sm, testna, type="class")
CA(observed, predicted)
sm <- svm(namembnost ~ povrsina + leto_izgradnje + regija, ucna, probability = T)
pred <- predict(sm, testna, probability = T)
predMat <- attr(pred, "probabilities")
colnames(obsMat)
colnames(predMat)
predMat <- predMat[,colnames(obsMat)]
brier.score(obsMat, predMat)
#VSE
set.seed(0)
sm <- svm(namembnost ~ ., data = ucna)
library(rpart)
library(rpart.plot)
##############################################################################################################################
#VSI ATRIBUTI
set.seed(0)
rt.model <- rpart(poraba ~ ., data = ucna)
#rpart.plot(rt.model)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
# do boljsega rezultat lahko pridemo z usreznim rezanjem drevesa
# najprej zgradimo veliko drevo (nastavitev cp=0)
rt.model <- rpart(poraba ~ ., data = ucna, cp = 0)
# rpart med gradnjo drevesa interno ocenjuje njegovo kvaliteto
tab <- printcp(rt.model)
# rpart med gradnjo drevesa interno ocenjuje njegovo kvaliteto
tab <- printcp(rt.model)
# izberemo vrednost parametra cp, ki ustreza minimalni napaki internega presnega preverjanja
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
# porezemo drevo z izbrano nastavitvijo
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
#VSI ATRIBUTI
set.seed(0)
rt.model <- rpart(poraba ~ ., data = ucna)
#rpart.plot(rt.model)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
# do boljsega rezultat lahko pridemo z usreznim rezanjem drevesa
# najprej zgradimo veliko drevo (nastavitev cp=0)
rt.model <- rpart(poraba ~ ., data = ucna, cp = 0)
# izberemo vrednost parametra cp, ki ustreza minimalni napaki internega presnega preverjanja
row <- which.min(tab[, "xerror"])
# rpart med gradnjo drevesa interno ocenjuje njegovo kvaliteto
tab <- printcp(rt.model)
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
# porezemo drevo z izbrano nastavitvijo
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
##############################################################################################################################
#RRELIEFF
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna)
#rpart.plot(rt.model)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
# do boljsega rezultat lahko pridemo z usreznim rezanjem drevesa
# najprej zgradimo veliko drevo (nastavitev cp=0)
rt.model <- rpart(poraba ~ povp_poraba_mesec_predhodni + povp_poraba_teden_predhodni, data = ucna, cp = 0)
# rpart med gradnjo drevesa interno ocenjuje njegovo kvaliteto
tab <- printcp(rt.model)
# izberemo vrednost parametra cp, ki ustreza minimalni napaki internega presnega preverjanja
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
# porezemo drevo z izbrano nastavitvijo
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
##############################################################################################################################
#WRAPPER
set.seed(0)
rt.model <- rpart(poraba ~ povp_poraba_teden_predhodni + povrsina, data = ucna)
#rpart.plot(rt.model)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
# do boljsega rezultat lahko pridemo z usreznim rezanjem drevesa
# najprej zgradimo veliko drevo (nastavitev cp=0)
rt.model <- rpart(poraba ~ povp_poraba_teden_predhodni + povrsina, data = ucna, cp = 0)
# rpart med gradnjo drevesa interno ocenjuje njegovo kvaliteto
tab <- printcp(rt.model)
# izberemo vrednost parametra cp, ki ustreza minimalni napaki internega presnega preverjanja
row <- which.min(tab[, "xerror"])
th <- mean(c(tab[row, "CP"], tab[row - 1, "CP"]))
# porezemo drevo z izbrano nastavitvijo
rt.model <- prune(rt.model, cp = th)
predicted <- predict(rt.model, testna)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
library(kknn)
set.seed(0)
knn.model <- kknn(poraba ~ ., ucna, testna, k = 5)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
##############################################################################################################################
#Vsi atributi; k = 10
set.seed(0)
knn.model <- kknn(poraba ~ ., ucna, testna, k = 10)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
# Wrapper; k = 5
set.seed(0)
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + letnicas + povp_poraba_teden_predhodni + datum + stavba + regija + namembnost + povrsina + temp_zraka + leto_izgradnje, ucna, testna, k = 5)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
##############################################################################################################################
##############################################################################################################################
# Wrapper; k = 10
set.seed(0)
knn.model <- kknn(poraba ~ povp_poraba_mesec_predhodni + vikend + leto_izgradnje + datum + povrsina + regija, ucna, testna, k = 10)
predicted <- fitted(knn.model)
mae(testna$poraba, predicted)
rmae(testna$poraba, predicted, mean(ucna$poraba))
mse(testna$poraba, predicted)
rmse(testna$poraba, predicted, mean(ucna$poraba))
#ucenje iz ene same regije
ucna_Vzhodna <- ucna[ucna$regija == "vzhodna"]
ucna_zahodna <- ucna[ucna$regija == "zahodna"]
View(testna)
#ucenje iz ene same regije
ucna_Vzhodna <- ucna[ucna$regija == "vzhodna"]
library(nnet)
observed <- testna$namembnost
obsMat <- class.ind(testna$namembnost)
#ucenje iz ene same regije
ucna_Vzhodna <- ucna[ucna$regija == "vzhodna"]
ucna_zahodna <- ucna[ucna$regija == "zahodna"]
